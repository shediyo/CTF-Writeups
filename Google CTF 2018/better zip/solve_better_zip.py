import os
import zipfile
import zlib
import hashlib
from struct import pack, unpack
import sys
from better_zip_defs import POLY_SZ, SETBIT, db, dw, dd, BitStream, LFSRCipher 

def udd(v):
    return unpack('<I', v)[0]

def udb(v):
  return unpack("<B", v)[0]

def udw(v):
  return unpack("<H", v)[0]

class LFSR:
  def __init__(self, poly, iv, sz):
    self.sz = sz
    self.poly = poly
    self.r = iv
    self.mask = (1 << sz) - 1

  def get_bit(self):
    bit = (self.r >> (self.sz - 1)) & 1

    new_bit = 1
    masked = self.r & self.poly
    for i in xrange(self.sz):
      new_bit ^= (masked >> i) & 1

    self.r = ((self.r << 1) | new_bit) & self.mask
    return bit

  def crypt_bits(self, s, i):
    res = []
    for c in s:
        res += [((ord(c) >> i) & 1) ^ self.get_bit()]
    return res


def str_get_bits(inp_str, i):
    return [(ord(c) >> i) & 1 for c in inp_str]


flag_zip_data = open('flag.zip', 'rb').read()
eocdh_split = flag_zip_data.split('PK\x05\x06')
print 'EOCDH DATA:\n\n'
eocdh = eocdh_split[1]
print repr(eocdh)
num_entries_1, num_entries_2, cdh_size, cdh_start = udw(eocdh[4:6]), udw(eocdh[6:8]), udd(eocdh[8:12]), udd(eocdh[12:16])
assert num_entries_2 == num_entries_1
num_entries = num_entries_1
print 'Number of entries:', num_entries 
print 'CDH size:', cdh_size
print 'CDH start:', cdh_start
print '\n'

flag_zip_data = eocdh_split[0]
cdh_split = flag_zip_data.split('PK\x01\x02')
print 'CDH DATA:\n'
cdh = cdh_split[1]
print repr(cdh)
cdh = cdh[12:]
crc, actual_size, data_len, fname_len = udd(cdh[:4]), udd(cdh[4:8]), udd(cdh[8:12]), udw(cdh[12:14])
print 'CRC:', hex(crc) 
print 'Actual Size:', actual_size
print 'File Data Len:', data_len
print 'File Name Len:', fname_len
cdh = cdh[14 + 4 * 2 + 4:]
offset = udd(cdh[:4])
filename = cdh[4:]
print 'Offset:', offset
print 'Filename:', filename
print '\n'

lfh_data = cdh_split[0]
lfh = lfh_data[14:]
crc_2, actual_size_2, data_len_2, fname_len_2 = udd(lfh[:4]), udd(lfh[4:8]), udd(lfh[8:12]), udw(lfh[12:14])
assert crc == crc_2 and actual_size == actual_size_2 and data_len == data_len_2 and fname_len == fname_len_2
lfh = lfh[16:]
filename_2 = lfh[:fname_len]
assert filename == filename_2
lfh = lfh[fname_len:]
key_iv = lfh[:20]
lfh = lfh[20:]
cipher_iv = lfh[:20]
lfh = lfh[20:]
print 'Enc IVS:'
print repr(key_iv), repr(cipher_iv)
file_enc_data = lfh[:-32]
file_hash_enc_data = lfh[-32:]
assert len(file_enc_data) == data_len

poly_sz = POLY_SZ
PNG_START = '\x89\x50\x4E\x47\x0D\x0A\x1A\x0A\x00\x00\x00\rIHDR'
PNG_END = '\x00\x00\x00\x00IEND\xaeB`\x82'

# xored with IV
start_lc = LFSRCipher('\x00' * 20, poly_sz, key_iv, cipher_iv)
file_start_data = start_lc.crypt(file_enc_data[:20])
assert file_start_data[:16] == PNG_START

image_width = unpack('>I', file_start_data[16:20])[0]
print 'image width:', image_width

# What we know about each byte in PNG:
# 20-23 is height, which is corresponding to width can be 360, 20 - 0, 21 - 0, 22 - 1, 23 - 0x68
# 24-28 is known IHDR data, in which: 24 - 1/2/4/8/16 - w.h.p 8, 25 - 0/2/3/4/6 (probably even), 26 - 0, 27 - 0, 28 - 0
# 29-32 is CRC, fully unknown
# 33-36 is length of next header, in which: 33 - 0, 34 - 0 or 1, 35 - ? , 36 - ?

# xor 1
KNOWN_0 = [(20, 0), (21, 0), (22, 1), (23, 0), (24, 0), (25, 0), (26, 0), (27, 0), (28, 0), (33, 0)]
# xor 2
KNOWN_1 = [(20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (26, 0), (27, 0), (28, 0), (33, 0), (34, 0)]
# xor 4
KNOWN_2 = [(20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (26, 0), (27, 0), (28, 0), (33, 0), (34, 0)]
# xor 8 
KNOWN_3 = [(20, 0), (21, 0), (22, 0), (23, 1), (24, 1), (25, 0), (26, 0), (27, 0), (28, 0), (33, 0), (34, 0)]
# xor 0x10 
KNOWN_4 = [(20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, 0), (28, 0), (33, 0), (34, 0)]
# xor 0x20
KNOWN_5 = [(20, 0), (21, 0), (22, 0), (23, 1), (24, 0), (25, 0), (26, 0), (27, 0), (28, 0), (33, 0), (34, 0)]
# xor 0x40
KNOWN_6 = [(20, 0), (21, 0), (22, 0), (23, 1), (24, 0), (25, 0), (26, 0), (27, 0), (28, 0), (33, 0), (34, 0)]
# xor 0x80
KNOWN_7 = [(20, 0), (21, 0), (22, 0), (23, 0), (24, 0), (25, 0), (26, 0), (27, 0), (28, 0), (33, 0), (34, 0)]
KNOWNS = [KNOWN_0, KNOWN_1, KNOWN_2, KNOWN_3, KNOWN_4, KNOWN_5, KNOWN_6, KNOWN_7]



possible_key_seqs = [[]]
key_iv_stream = BitStream(key_iv)
cipher_iv_stream = BitStream(cipher_iv)
for i in range(8):
    print 'Stage', i
    header_expected = KNOWNS[i] 
    trailer_expected = str_get_bits(PNG_END, i)
    key_iv_bits = key_iv_stream.get_bits(poly_sz)
    cipher_iv_bits = cipher_iv_stream.get_bits(poly_sz)
    new_possible_key_seqs = []
    for key in xrange(2 ** 20):
        if key % (2 ** 16) == 0:
            print 'In-Stage', key // (2 ** 16)
        
        last_half_byte = (key // (256 ** 2)) % 256
        key_bytes = bytearray(chr(key % 256) + chr((key // 256) % 256) + chr(last_half_byte * 16 + last_half_byte))
        key_s = BitStream(key_bytes)
        curr_bits = key_s.get_bits(poly_sz)
        l = LFSR(curr_bits ^ key_iv_bits, cipher_iv_bits , poly_sz)

        cont_flag = False
        header_guess = l.crypt_bits(file_enc_data[:40], i)   
        for j in range(len(header_expected)):
            if header_expected[j][1] != header_guess[header_expected[j][0]]:
                cont_flag = True
        if cont_flag:
            continue

        trailer_guess = l.crypt_bits(file_enc_data[40:], i)
        for j in range(len(trailer_expected)):
            if trailer_expected[j] != trailer_guess[-len(PNG_END) + j]:
                cont_flag = True
        if cont_flag:
            continue

        print 'Found possible key for index ' + str(i) + ':' + str(key)
        for pks in possible_key_seqs:
            new_possible_key_seqs.append(pks + [key])

    if len(new_possible_key_seqs) == 0:
        print 'Did not find good key, incorrect assumption'
        raise Exception()

    possible_key_seqs = new_possible_key_seqs
    print possible_key_seqs

# possible_key_seqs = [[403833, 51827, 474551, 361691, 290377, 415365, 93513, 415350], [546047, 51827, 474551, 361691, 290377, 415365, 93513, 415350], [403833, 202804, 474551, 361691, 290377, 415365, 93513, 415350], [546047, 202804, 474551, 361691, 290377, 415365, 93513, 415350], [403833, 236747, 474551, 361691, 290377, 415365, 93513, 415350], [546047, 236747, 474551, 361691, 290377, 415365, 93513, 415350], [403833, 288342, 474551, 361691, 290377, 415365, 93513, 415350], [546047, 288342, 474551, 361691, 290377, 415365, 93513, 415350], [403833, 401329, 474551, 361691, 290377,415365, 93513, 415350], [546047, 401329, 474551, 361691, 290377, 415365, 93513,415350], [403833, 761447, 474551, 361691, 290377, 415365, 93513, 415350], [546047, 761447, 474551, 361691, 290377, 415365, 93513, 415350], [403833, 889625, 474551, 361691, 290377, 415365, 93513, 415350], [546047, 889625, 474551, 361691, 290377, 415365, 93513, 415350], [403833, 51827, 483692, 361691, 290377, 415365, 93513, 415350], [546047, 51827, 483692, 361691, 290377, 415365, 93513, 415350], [403833, 202804, 483692, 361691, 290377, 415365, 93513, 415350], [546047, 202804, 483692, 361691, 290377, 415365, 93513, 415350], [403833, 236747, 483692, 361691,290377, 415365, 93513, 415350], [546047, 236747, 483692, 361691, 290377, 415365, 93513, 415350], [403833, 288342, 483692, 361691, 290377, 415365, 93513, 415350], [546047, 288342, 483692, 361691, 290377, 415365, 93513, 415350], [403833, 401329, 483692, 361691, 290377, 415365, 93513, 415350], [546047, 401329, 483692, 361691, 290377, 415365, 93513, 415350], [403833, 761447, 483692, 361691, 290377, 415365, 93513, 415350], [546047, 761447, 483692, 361691, 290377, 415365, 93513, 415350], [403833, 889625, 483692, 361691, 290377, 415365, 93513, 415350], [546047, 889625, 483692, 361691, 290377, 415365, 93513, 415350], [403833, 51827, 474551, 472214, 290377, 415365, 93513, 415350], [546047, 51827, 474551, 472214, 290377, 415365, 93513, 415350], [403833, 202804, 474551, 472214, 290377, 415365, 93513, 415350], [546047, 202804, 474551, 472214, 290377, 415365, 93513, 415350], [403833, 236747, 474551, 472214, 290377, 415365, 93513, 415350], [546047, 236747, 474551, 472214, 290377, 415365, 93513, 415350], [403833, 288342, 474551, 472214, 290377, 415365, 93513, 415350], [546047, 288342, 474551, 472214, 290377, 415365, 93513, 415350], [403833, 401329, 474551, 472214, 290377, 415365, 93513, 415350],[546047, 401329, 474551, 472214, 290377, 415365, 93513, 415350], [403833, 761447, 474551, 472214, 290377, 415365, 93513, 415350], [546047, 761447, 474551, 472214, 290377, 415365, 93513, 415350], [403833, 889625, 474551, 472214, 290377, 415365, 93513, 415350], [546047, 889625, 474551, 472214, 290377, 415365, 93513, 415350], [403833, 51827, 483692, 472214, 290377, 415365, 93513, 415350], [546047, 51827, 483692, 472214, 290377, 415365, 93513, 415350], [403833, 202804, 483692, 472214, 290377, 415365, 93513, 415350], [546047, 202804, 483692, 472214, 290377, 415365, 93513, 415350], [403833, 236747, 483692, 472214, 290377, 415365, 93513, 415350], [546047, 236747, 483692, 472214, 290377, 415365, 93513, 415350], [403833, 288342, 483692, 472214, 290377, 415365, 93513, 415350], [546047, 288342, 483692, 472214, 290377, 415365, 93513, 415350], [403833, 401329, 483692, 472214, 290377, 415365, 93513, 415350], [546047, 401329, 483692, 472214, 290377, 415365, 93513, 415350], [403833, 761447, 483692, 472214, 290377, 415365, 93513, 415350], [546047, 761447, 483692, 472214, 290377, 415365, 93513, 415350], [403833, 889625,483692, 472214, 290377, 415365, 93513, 415350], [546047, 889625, 483692, 472214, 290377, 415365, 93513, 415350], [403833, 51827, 474551, 361691, 290377, 415365, 818930, 415350], [546047, 51827, 474551, 361691, 290377, 415365, 818930, 415350], [403833, 202804, 474551, 361691, 290377, 415365, 818930, 415350], [546047, 202804, 474551, 361691, 290377, 415365, 818930, 415350], [403833, 236747, 474551,361691, 290377, 415365, 818930, 415350], [546047, 236747, 474551, 361691, 290377, 415365, 818930, 415350], [403833, 288342, 474551, 361691, 290377, 415365, 818930, 415350], [546047, 288342, 474551, 361691, 290377, 415365, 818930, 415350], [403833, 401329, 474551, 361691, 290377, 415365, 818930, 415350], [546047, 401329, 474551, 361691, 290377, 415365, 818930, 415350], [403833, 761447, 474551, 361691, 290377, 415365, 818930, 415350], [546047, 761447, 474551, 361691, 290377, 415365, 818930, 415350], [403833, 889625, 474551, 361691, 290377, 415365, 818930,415350], [546047, 889625, 474551, 361691, 290377, 415365, 818930, 415350], [403833, 51827, 483692, 361691, 290377, 415365, 818930, 415350], [546047, 51827, 483692, 361691, 290377, 415365, 818930, 415350], [403833, 202804, 483692, 361691, 290377, 415365, 818930, 415350], [546047, 202804, 483692, 361691, 290377, 415365,818930, 415350], [403833, 236747, 483692, 361691, 290377, 415365, 818930, 415350], [546047, 236747, 483692, 361691, 290377, 415365, 818930, 415350], [403833, 288342, 483692, 361691, 290377, 415365, 818930, 415350], [546047, 288342, 483692,361691, 290377, 415365, 818930, 415350], [403833, 401329, 483692, 361691, 290377, 415365, 818930, 415350], [546047, 401329, 483692, 361691, 290377, 415365, 818930, 415350], [403833, 761447, 483692, 361691, 290377, 415365, 818930, 415350], [546047, 761447, 483692, 361691, 290377, 415365, 818930, 415350], [403833, 889625, 483692, 361691, 290377, 415365, 818930, 415350], [546047, 889625, 483692, 361691, 290377, 415365, 818930, 415350], [403833, 51827, 474551, 472214, 290377, 415365, 818930, 415350], [546047, 51827, 474551, 472214, 290377, 415365, 818930, 415350], [403833, 202804, 474551, 472214, 290377, 415365, 818930, 415350], [546047, 202804, 474551, 472214, 290377, 415365, 818930, 415350], [403833, 236747, 474551, 472214, 290377, 415365, 818930, 415350], [546047, 236747, 474551, 472214, 290377, 415365, 818930, 415350], [403833, 288342, 474551, 472214, 290377, 415365,818930, 415350], [546047, 288342, 474551, 472214, 290377, 415365, 818930, 415350], [403833, 401329, 474551, 472214, 290377, 415365, 818930, 415350], [546047, 401329, 474551, 472214, 290377, 415365, 818930, 415350], [403833, 761447, 474551,472214, 290377, 415365, 818930, 415350], [546047, 761447, 474551, 472214, 290377, 415365, 818930, 415350], [403833, 889625, 474551, 472214, 290377, 415365, 818930, 415350], [546047, 889625, 474551, 472214, 290377, 415365, 818930, 415350], [403833, 51827, 483692, 472214, 290377, 415365, 818930, 415350], [546047, 51827,483692, 472214, 290377, 415365, 818930, 415350], [403833, 202804, 483692, 472214, 290377, 415365, 818930, 415350], [546047, 202804, 483692, 472214, 290377, 415365, 818930, 415350], [403833, 236747, 483692, 472214, 290377, 415365, 818930, 415350], [546047, 236747, 483692, 472214, 290377, 415365, 818930, 415350], [403833, 288342, 483692, 472214, 290377, 415365, 818930, 415350], [546047, 288342, 483692, 472214, 290377, 415365, 818930, 415350], [403833, 401329, 483692, 472214, 290377, 415365, 818930, 415350], [546047, 401329, 483692, 472214, 290377, 415365,818930, 415350], [403833, 761447, 483692, 472214, 290377, 415365, 818930, 415350], [546047, 761447, 483692, 472214, 290377, 415365, 818930, 415350], [403833, 889625, 483692, 472214, 290377, 415365, 818930, 415350], [546047, 889625, 483692,472214, 290377, 415365, 818930, 415350]]
print len(possible_key_seqs)
print 'Checking all key possibilities'
for key_possibility in possible_key_seqs:
    lc = LFSRCipher('\x00' * 20)
    lcs = []
    key_iv_stream = BitStream(key_iv)
    cipher_iv_stream = BitStream(cipher_iv)
    for i in range(8):
        key_iv_bits = key_iv_stream.get_bits(poly_sz)
        cipher_iv_bits = cipher_iv_stream.get_bits(poly_sz)
        key = key_possibility[i]
        last_half_byte = (key // (256 ** 2)) % 256
        key_bytes = bytearray(chr(key % 256) + chr((key // 256) % 256) + chr(last_half_byte * 16 + last_half_byte))
        key_s = BitStream(key_bytes)
        curr_bits = key_s.get_bits(poly_sz)
        new_l = LFSR(curr_bits ^ key_iv_bits, cipher_iv_bits, poly_sz)
        lcs.append(new_l)
    lc.lfsr = lcs
    real_file_data = lc.crypt(file_enc_data)
    real_hash_data = lc.crypt(file_hash_enc_data)
    sha256 = hashlib.sha256(real_file_data)
    if sha256.digest() != real_hash_data:
        continue
    print 'GOT THE FLAG'
    print(key_possibility)
    f = open('flag.png', 'wb')
    f.write(real_file_data)
    f.close()
    break

    