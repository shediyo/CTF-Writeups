from collections import OrderedDict
import struct

# Making the global used perms and tables
LAST_PERMS = open("last_perms", "rb").read()
LAST_PERMS = [ord(z) for z in LAST_PERMS]

INNER_PERMS = open("inner_perms", "rb").read()
INNER_PERMS = INNER_PERMS.replace('\t','').replace(' ','').replace('\r\n','')
INNER_PERMS = [int(INNER_PERMS[i:i+4],16) for i in range(0, len(INNER_PERMS), 4)]
            
HFS = open("obfus_aes_operations_table", "rb").read()
assert len(HFS) == (16 * 9) * (256 * 4)
DHFS = [struct.unpack('<I', HFS[4 * ind : 4 * ind + 4])[0] for ind in range(256 * 16 * 9)]

def shift_rows(x):
    x = list(x)

    temp = x[1]
    x[1] = x[5]
    x[5] = x[9]
    x[9] = x[13]
    x[13] = temp

    temp = x[2]
    x[2] = x[10]
    x[10] = temp

    temp = x[6]
    x[6] = x[14]
    x[14] = temp

    temp = x[3]
    x[3] = x[15]
    x[15] = x[11]
    x[11] = x[7]
    x[7] = temp

    return ''.join(x)

def un_shift_rows(x):
    x = list(x)

    temp = x[13]
    x[13] = x[9]
    x[9] = x[5]
    x[5] = x[1]
    x[1] = temp

    temp = x[2]
    x[2] = x[10]
    x[10] = temp

    temp = x[6]
    x[6] = x[14]
    x[14] = temp

    temp = x[7]
    x[7] = x[11]
    x[11] = x[15]
    x[15] = x[3]
    x[3] = temp

    return ''.join(x)

def obfus_AES_mix_key_sbox(x , i):
    global DHFS, INNER_PERMS
    x = list(x)
    x = [ord(z) for z in x]
    for j in range(4):
        temp1 = DHFS[ ((4 * j + 0 + 16 * i) << 8) + x[4 * j + 0] ]
        temp2 = DHFS[ ((4 * j + 1 + 16 * i) << 8) + x[4 * j + 1] ]
        temp3 = DHFS[ ((4 * j + 2 + 16 * i) << 8) + x[4 * j + 2] ]
        temp4 = DHFS[ ((4 * j + 3 + 16 * i) << 8) + x[4 * j + 3] ]

        ipt2 = INNER_PERMS[16 * ((temp3 >> 4) & 0xF) + ((temp4 >> 4) & 0xF)] & 0xF
        ipt1 = INNER_PERMS[16 * ((temp1 >> 4) & 0xF) + ((temp2 >> 4) & 0xF)] & 0xF
        ipt = 16 * INNER_PERMS[16 * ipt1 + ipt2]
        iqt2 = INNER_PERMS[16 * (temp3 & 0xF) + (temp4 & 0xF)] & 0xF
        iqt1 = INNER_PERMS[16 * (temp1 & 0xF) + (temp2 & 0xF)] & 0xF
        iqt = INNER_PERMS[16 * iqt1 + iqt2]
        x[4 * j] = ipt | iqt

        ipt2 = INNER_PERMS[16 * ((temp3 >> 12) & 0xF) + ((temp4 >> 12) & 0xF)] & 0xF
        ipt1 = INNER_PERMS[16 * ((temp1 >> 12) & 0xF) + ((temp2 >> 12) & 0xF)] & 0xF
        ipt = 16 * INNER_PERMS[16 * ipt1 + ipt2]
        iqt2 = INNER_PERMS[16 * ((temp3 >> 8) & 0xF) + ((temp4 >> 8) & 0xF)] & 0xF
        iqt1 = INNER_PERMS[16 * ((temp1 >> 8) & 0xF) + ((temp2 >> 8) & 0xF)] & 0xF
        iqt = INNER_PERMS[16 * iqt1 + iqt2]
        x[4 * j + 1] = ipt | iqt

        ipt2 = INNER_PERMS[16 * ((temp3 >> 20) & 0xF) + ((temp4 >> 20) & 0xF)] & 0xF
        ipt1 = INNER_PERMS[16 * ((temp1 >> 20) & 0xF) + ((temp2 >> 20) & 0xF)] & 0xF
        ipt = 16 * INNER_PERMS[16 * ipt1 + ipt2]
        iqt2 = INNER_PERMS[16 * ((temp3 >> 16) & 0xF) + ((temp4 >> 16) & 0xF)] & 0xF
        iqt1 = INNER_PERMS[16 * ((temp1 >> 16) & 0xF) + ((temp2 >> 16) & 0xF)] & 0xF
        iqt = INNER_PERMS[16 * iqt1 + iqt2]
        x[4 * j + 2] = ipt | iqt

        ipt2 = INNER_PERMS[16 * ((temp3 >> 28) & 0xF) + ((temp4 >> 28) & 0xF)] & 0xF
        ipt1 = INNER_PERMS[16 * ((temp1 >> 28) & 0xF) + ((temp2 >> 28) & 0xF)] & 0xF
        ipt = 16 * INNER_PERMS[16 * ipt1 + ipt2]
        iqt2 = INNER_PERMS[16 * ((temp3 >> 24) & 0xF) + ((temp4 >> 24) & 0xF)] & 0xF
        iqt1 = INNER_PERMS[16 * ((temp1 >> 24) & 0xF) + ((temp2 >> 24) & 0xF)] & 0xF
        iqt = INNER_PERMS[16 * iqt1 + iqt2]
        x[4 * j + 3] = ipt | iqt
    x = [chr(z) for z in x]
    return ''.join(x)

def obfus_AES_last_stage(x):
    global LAST_PERMS
    x = list(x)
    x = [ord(z) for z in x]
    for i in range(16):
        x[i] = LAST_PERMS[256 * i + x[i]]
    x = [chr(z) for z in x]
    return ''.join(x)

def obfus_AES(plain):
    result = plain
    for i in range(9):
        result = shift_rows(result)
        result = obfus_AES_mix_key_sbox(result, i)
    result = shift_rows(result)
    result = obfus_AES_last_stage(result)
    return result

def GMul(a, b):
    p = 0 
    hi_bit_set =  0 
    for counter in range(8):
        if ((b & 1) != 0):
            p ^= a

        hi_bit_set = (a & 0x80)

        a <<= 1
        if hi_bit_set != 0:
            a ^= 0x1B # x^8 + x^4 + x^3 + x + 1
        b >>= 1
    return (p % 256)

def MixColumns(x):
    x = list(x)
    x = [ord(z) for z in x]
    # print x
    s = [0] * len(x)
    for i in range(len(x)):
        s[i] = x[i]
    for j in range(4):
        x[4 * j + 0] = (GMul(0x02, s[4 * j]) ^ GMul(0x03, s[4 *j + 1]) ^ s[4 * j + 2] ^ s[4 * j + 3])
        x[4 * j + 1] = (s[4 * j] ^ GMul(0x02, s[4 *j + 1]) ^ GMul(0x03, s[4 * j + 2]) ^ s[4 * j + 3])
        x[4 * j + 2] = (s[4 * j] ^ s[4 *j + 1] ^ GMul(0x02, s[4 * j + 2]) ^ GMul(0x03, s[4 * j + 3]))
        x[4 * j + 3] = (GMul(0x03, s[4 * j]) ^ s[4 *j + 1] ^ s[4 * j + 2] ^ GMul(0x02, s[4 * j + 3]))
    x = [chr(z) for z in x]
    return ''.join(x)

def InvMixColumns(x):
    x = list(x)
    x = [ord(z) for z in x]
    # print x
    s = [0] * len(x)
    for i in range(len(x)):
        s[i] = x[i]
    for j in range(4):
        x[4 * j + 0] = GMul(0x0E, s[4 * j]) ^ GMul(0x0B, s[4 *j + 1]) ^ GMul(0x0D, s[4 *j + 2]) ^ GMul(0x09, s[4 *j + 3])
        x[4 * j + 1] = GMul(0x09, s[4 * j]) ^ GMul(0x0E, s[4 *j + 1]) ^ GMul(0x0B, s[4 *j + 2]) ^ GMul(0x0D, s[4 *j + 3])
        x[4 * j + 2] = GMul(0x0D, s[4 * j]) ^ GMul(0x09, s[4 *j + 1]) ^ GMul(0x0E, s[4 *j + 2]) ^ GMul(0x0B, s[4 *j + 3])
        x[4 * j + 3] = GMul(0x0B, s[4 * j]) ^ GMul(0x0D, s[4 *j + 1]) ^ GMul(0x09, s[4 *j + 2]) ^ GMul(0x0E, s[4 *j + 3])
    x = [chr(z) for z in x]
    return ''.join(x)

# AES sbox and reverse sbox in use
sbox = [
0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16]

rsbox = [
0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d ]

print "Stage 1: all key tables calculation"
all_key_tables = []
for pos in range(16):
    current_table = []
    for i in range(256):
        back_result = obfus_AES_mix_key_sbox('\x00' * pos + chr(i) + '\x00' * (15 - pos), 0)
        back_result_then_inv_mc = InvMixColumns(back_result)
        current_table += [ord(back_result_then_inv_mc[pos])]
    all_key_tables += [current_table]

print "Stage 2: find keys from tables"
found_keys = []
for z in range(16):
  for k in range(256):
    for k2 in range(256):
      good = True
      for i in range(256):
        if all_key_tables[z][i] != sbox[i ^ k] ^ k2:
          good = False
      if good:
        print k, k2, 'Found', z
        found_keys += [(k, k2)]

shifted_key = ''.join([chr(fk[0]) for fk in found_keys])
print 'Found shifted key:', shifted_key

print 'Key:', un_shift_rows(shifted_key)




'''
# POC: correct algo implementation
print repr(obfus_AES('1234567890abcdef'))

# POC: finding xors between tables

ROUNDS = [ DHFS[(256 * 16 * i):(256 * 16 * (i + 1))] for i in range(9)]
key_xor = []
round_key_xor = []

state = 1
offset = 256 * 12
for k in range(256):
    if ROUNDS[1][256 * state] == ROUNDS[0][256 * state + offset + k]:
        print k
        for z in range(256):
            if ROUNDS[1][256 * state + z] != ROUNDS[0][256 * state + offset +  z ^ k]:
                print 'bad', z
        key_xor += [k]
print key_xor

for j in range(8):
    for state in range(16):
        for k in range(256):
            if ROUNDS[j][256 * state + 0] == ROUNDS[j + 1][256 * state + k]:
                print k
                for z in range(256):
                    if ROUNDS[j][256 * state + z] != ROUNDS[j + 1][256 * state + z ^ k]:
                        print 'bad', z
                key_xor += [k]
    round_key_xor += [key_xor]
    key_xor = []
    
for key_xor in round_key_xor:
    print key_xor
 
for i in range(16):
    for j in range(9):
        for k in range(9):
            xor_val = sub_boxes[j][i][0] ^ sub_boxes[k][i][0]
            if xor_val ^ sub_boxes[j][i][3] != sub_boxes[k][i][3]:
                print 'bad'

 xor_vals =[[221, 46, 79, 78, 188, 26, 16, 114, 200, 47, 65, 45, 251, 31, 45, 28],
[205, 27, 214, 178, 5, 30, 17, 112, 185, 46, 180, 224, 54, 42, 78, 65],
[167, 68, 10, 157, 162, 90, 27, 142, 27, 116, 146, 110, 45, 95, 220, 47],
[99, 159, 200, 195, 193, 197, 211, 31, 218, 177, 30, 113, 247, 219, 194, 94],
[157, 182, 239, 7, 92, 115, 60, 235, 134, 194, 229, 154, 113, 41, 39, 196],
[24, 231, 16, 186, 68, 148, 44, 227, 194, 86, 216, 121, 179, 81, 255, 189],
[247, 173, 103, 197, 179, 57, 75, 187, 113, 111, 136, 194, 194, 74, 119, 127],
[4, 93, 16, 147, 183, 100, 91, 235, 198, 11, 0, 41, 4, 240, 119, 86]]
xor_in_4_offset = [21, 1, 13, 106,   71, 90, 62, 110,   108, 94, 14, 99]
sx = [221, 46, 79, 78, 188, 26, 16, 114, 200, 47, 65, 45, 251, 31, 45, 28]
'''

